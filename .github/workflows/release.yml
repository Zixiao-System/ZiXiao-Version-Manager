name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: universal
            platform: mac
          - os: windows-latest
            arch: x64
            platform: win
          - os: ubuntu-latest
            arch: x64
            platform: linux

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Electron app
        run: npm run electron:build
        env:
          # Disable auto-publish to avoid conflicts between parallel builds
          PUBLISH_FOR_PULL_REQUEST: false

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ZiXiao-Version-Manager-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            dist-electron/*.dmg
            dist-electron/*.zip
            dist-electron/*.exe
            dist-electron/*.AppImage
            dist-electron/*.deb
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: false

      - name: Organize release files
        run: |
          mkdir -p release-files
          # Move all build artifacts to a flat directory
          # Use find with -print0 and while read to handle spaces in filenames
          find artifacts -type f \( -name "*.dmg" -o -name "*.zip" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.deb" \) -print0 | while IFS= read -r -d '' file; do
            filename=$(basename "$file")
            # If file already exists, skip it (avoid duplicate uploads)
            if [ ! -f "release-files/$filename" ]; then
              mv "$file" "release-files/"
              echo "Moved: $filename"
            else
              echo "Skipping duplicate: $filename"
            fi
          done
          # List all files for debugging
          echo "Files to be released:"
          ls -lh release-files/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-files/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
